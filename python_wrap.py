#! /usr/bin/env python

from argparse import RawTextHelpFormatter

import os, errno, sys, argparse, subprocess

VERSION = '0.5.0'

sys.stdout = sys.stderr

def perform_main(args):
    if 'func' in args:
        try:
            args.func(args)
        except Exception as ex:
            print(ex)

# define parse
prog_description = 'Mermaid is a program developed by Bioturing INC for finding fusion of NGS paired-end reads.\n'
prog_description += 'It uses the BWA-aligner for alignment step, then process output result to detecting fusion.\n'
prog_description += 'Please contact info@bioturing.com if you need further support.\n\n'
prog_description += 'Version: '
prog_description += VERSION + '\n\n'
prog_description += 'Note: To use mermaid, you need to first create index with `mermaid index\'.'

parser = argparse.ArgumentParser(
                    formatter_class=RawTextHelpFormatter,
                    description=prog_description)
subparsers = parser.add_subparsers(title='commands')

# index subcommand
def mermaid_index(args):
    try:
        os.makedirs(args.outdir)
    except OSError as err:
        if err.errno != errno.EEXIST:
            raise

    # generate trans
    try:
        val = subprocess.Popen(['./generate_trans', args.genome, args.gtf, args.outdir])
        output = val.communicate()[0]
    except Exception:
        raise
    if val.returncode != 0:
        exit()

    # bwa index
    trans_path = os.path.join(args.outdir, 'trans.fa')
    try:
        val = subprocess.Popen(['bwa', 'index', trans_path])
        output = val.communicate()[0]
    except Exception:
        raise
    if val.returncode != 0:
        exit()

parser_index = subparsers.add_parser(
                	'index',
                	formatter_class=RawTextHelpFormatter,
                	description= 'Builds a mermaid index.\n\n'
                		         'Example: ./mermaid index --gtf Homo_sapiens.GRCh37.75.gtf --genome\n'
                		         '         Homo_sapiens.GRCh37.75.dna_sm.primary_assembly.fa --outdir index/\n',
                	help='builds a mermaid index')

parser_index.add_argument('--gtf', help='path to gene annotation file', required=True, metavar='STR')
parser_index.add_argument('--genome',  help='path to genome file', required=True, metavar='STR')
parser_index.add_argument('--outdir', help='directory to store index file', required=True, metavar='STR')

parser_index.set_defaults(func=mermaid_index)

# fusion subcommand
def mermaid_fusion(args):
    # bwa mem
    cmd = ['bwa', 'mem', '-h100', '-T20', '-L15', '-w30', '-A1', '-B2', '-O8', '-E1', '-k17', '-Y']
    if args.nthread != None:
        cmd.append("-t" + args.nthread)
    cmd.append(os.path.join(args.index_dir, 'trans.fa'));    
    cmd.append(args.read1_file);
    cmd.append(args.read2_file);

    if args.outdir == None:
        args.outdir = 'mermaid-out'
    try:
        os.makedirs(args.outdir)
    except OSError as err:
        if err.errno != errno.EEXIST:
            raise

    sam_path = os.path.join(args.index_dir, args.read1_file + '.sam')
    fi = open(sam_path, 'w')
    try:
        val = subprocess.Popen(cmd, stdout=fi)
        output = val.communicate()[0]
    except Exception:
        raise
    if val.returncode != 0:
        exit()

    # mermaid fusion
    cmd = ['./mermaid']
    if args.nthread != None:
        cmd.append("--nthread")
        cmd.append(args.nthread)
    if args.fragment != None:
        cmd.append("--fragment")
        cmd.append(args.fragment)
    cmd.append("--idxdir")
    cmd.append(args.index_dir)
    cmd.append("--sam")
    cmd.append(sam_path)
    cmd.append("--outdir")
    cmd.append(args.outdir)

    try:
        val = subprocess.Popen(cmd)
        output = val.communicate()[0]
    except Exception:
        raise

    if val.returncode != 0:
        exit()

parser_fusion = subparsers.add_parser(
                    'fusion',
                	formatter_class=RawTextHelpFormatter,
                	description= 'Runs the fusion finding algorithm.\n\n'
                		         'Example: ./mermaid fusion --outdir result/ --nthread 8 index/ read_1.fq read_2.fq\n',
                	help='runs the fusion finding algorithm',
                    add_help=False)

parser_fusion.add_argument('index_dir',
                           help='directory where storing index file generated by mermaid')
parser_fusion.add_argument('read1_file',
                           help='path to first file of paired-end reads (fastq/fasta format, gziped or not)')
parser_fusion.add_argument('read2_file',
                           help='path to second file of paired-end reads (fastq/fasta format, gziped or not)')

fusion_general_group = parser_fusion.add_argument_group('general arguments')

fusion_general_group.add_argument('--outdir',
                                  help='directory to write output (default: mermaid_out/)',
                                  metavar='STR')
fusion_general_group.add_argument('--nthread',
                                  help='number of threads (default: 1)',
                                  metavar='INT')
fusion_general_group.add_argument('-h', '--help',
                                  action='help',
                                  help='show usage and exit')

fusion_align_group = parser_fusion.add_argument_group('alignment arguments')
fusion_align_group.add_argument('--fragment',
                                help='maximum fragment length of paired-end read (default: 500)',
                                metavar='INT')
fusion_align_group.add_argument('--keep-sam',
						        help='keep SAM result (it will be store in index directory, if name of read 1 is read_1.fq,\n'
                                     'the name of SAM file is read_1.fq.sam, default: false)',
                                action='store_true',
                                default=False)

fusion_align_group = parser_fusion.add_argument_group('fusion arguments')

fusion_align_group.add_argument('--score-filter',
                                help='fusion has score below this threshold will be exclude (default: 5)',
                                metavar='INT')
fusion_align_group.add_argument('--nread-filter',
                                help='fusion has total reads support below this threshold will be exclude (default: 0)',
                                metavar='INT')

parser_fusion.set_defaults(func=mermaid_fusion)

# version subcommand
def mermaid_version(args):
    print('')
    print('mermaid version %s' % (VERSION))
    print('')
    print('Changes from previous version:')

parser_version = subparsers.add_parser(
                    'version',
                    help='show version infomation')

parser_version.set_defaults(func=mermaid_version)

#Parse args
args = parser.parse_args()
perform_main(args)